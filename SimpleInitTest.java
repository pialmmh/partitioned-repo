import com.telcobright.api.ShardingRepository;
import com.telcobright.core.config.DataSourceConfig;
import com.telcobright.core.entity.ShardingEntity;
import com.telcobright.core.enums.*;
import com.telcobright.core.repository.SplitVerseRepository;
import com.telcobright.splitverse.config.RepositoryMode;
import com.telcobright.core.annotation.*;
import java.time.LocalDateTime;
import java.util.Arrays;

@Table(name = "test_orders")
class TestOrder implements ShardingEntity {
    @Id(autoGenerated = false)
    @Column(name = "id")
    private String id;

    @ShardingKey
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "customer_id")
    private String customerId;

    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    public String getCustomerId() { return customerId; }
    public void setCustomerId(String customerId) { this.customerId = customerId; }
}

public class SimpleInitTest {
    public static void main(String[] args) {
        try {
            System.out.println("Creating repository...");
            ShardingRepository<TestOrder> repository = SplitVerseRepository.<TestOrder>builder()
                .withEntityClass(TestOrder.class)
                .withTableName("orders")
                .withShardingStrategy(ShardingStrategy.SINGLE_KEY_HASH)
                .withRepositoryMode(RepositoryMode.MULTI_TABLE)
                .withDataSources(Arrays.asList(
                    DataSourceConfig.create("127.0.0.1", 3306, "test_shard_1", "root", "123456")
                ))
                .build();

            System.out.println("Repository created successfully!");
            repository.shutdown();
        } catch (Exception e) {
            System.err.println("Failed to create repository: " + e.getMessage());
            e.printStackTrace();
        }
    }
}