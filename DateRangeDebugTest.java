import com.telcobright.api.ShardingRepository;
import com.telcobright.core.config.DataSourceConfig;
import com.telcobright.core.entity.ShardingEntity;
import com.telcobright.core.enums.*;
import com.telcobright.core.repository.SplitVerseRepository;
import com.telcobright.splitverse.config.RepositoryMode;
import com.telcobright.core.annotation.*;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

@Table(name = "users")
class TestUser implements ShardingEntity {
    public TestUser() {} // Add public constructor

    @Id(autoGenerated = false)
    @Column(name = "id")
    private String id;

    @ShardingKey
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "name")
    private String name;

    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
}

public class DateRangeDebugTest {
    public static void main(String[] args) throws SQLException {
        // Initialize repository
        ShardingRepository<TestUser> repository = SplitVerseRepository.<TestUser>builder()
            .withEntityClass(TestUser.class)
            .withTableName("users")
            .withShardingStrategy(ShardingStrategy.DUAL_KEY_HASH_RANGE)
            .withPartitionColumn("created_at", PartitionColumnType.LOCAL_DATE_TIME)
            .withPartitionRange(PartitionRange.DAILY)
            .withRepositoryMode(RepositoryMode.MULTI_TABLE)
            .withRetentionDays(7)
            .withIdSize(22)
            .withDataSources(Arrays.asList(
                DataSourceConfig.create("127.0.0.1", 3306, "test_split_verse", "root", "123456")
            ))
            .build();

        try {
            LocalDateTime now = LocalDateTime.now();
            LocalDateTime oneHourAgo = now.minusHours(1);
            LocalDateTime twoHoursAgo = now.minusHours(2);
            LocalDateTime tomorrow = now.plusDays(1);

            // Insert test users
            TestUser user1 = new TestUser();
            user1.setId(UUID.randomUUID().toString().replace("-", "").substring(0, 22));
            user1.setCreatedAt(now);
            user1.setName("User Now");
            repository.insert(user1);
            System.out.println("Inserted user at: " + now);

            TestUser user2 = new TestUser();
            user2.setId(UUID.randomUUID().toString().replace("-", "").substring(0, 22));
            user2.setCreatedAt(oneHourAgo);
            user2.setName("User OneHourAgo");
            repository.insert(user2);
            System.out.println("Inserted user at: " + oneHourAgo);

            // Test findAllAfterDate
            System.out.println("\n--- Testing findAllAfterDate(twoHoursAgo) ---");
            List<TestUser> afterTwoHours = repository.findAllAfterDate(twoHoursAgo);
            System.out.println("Found " + afterTwoHours.size() + " users after " + twoHoursAgo);
            for (TestUser u : afterTwoHours) {
                System.out.println("  - " + u.getName() + " at " + u.getCreatedAt());
            }

            // Test findAllBeforeDate
            System.out.println("\n--- Testing findAllBeforeDate(tomorrow) ---");
            List<TestUser> beforeTomorrow = repository.findAllBeforeDate(tomorrow);
            System.out.println("Found " + beforeTomorrow.size() + " users before " + tomorrow);
            for (TestUser u : beforeTomorrow) {
                System.out.println("  - " + u.getName() + " at " + u.getCreatedAt());
            }

            // Test findAllByDateRange
            System.out.println("\n--- Testing findAllByDateRange(twoHoursAgo, tomorrow) ---");
            List<TestUser> inRange = repository.findAllByDateRange(twoHoursAgo, tomorrow);
            System.out.println("Found " + inRange.size() + " users in range");
            for (TestUser u : inRange) {
                System.out.println("  - " + u.getName() + " at " + u.getCreatedAt());
            }

            System.out.println("\nTest completed successfully!");
        } finally {
            repository.shutdown();
        }
    }
}