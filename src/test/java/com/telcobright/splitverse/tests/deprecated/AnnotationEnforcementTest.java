package com.telcobright.splitverse.tests;

import com.telcobright.core.annotation.*;
import com.telcobright.core.entity.ShardingEntity;
import com.telcobright.core.metadata.EntityMetadata;

import java.time.LocalDateTime;

/**
 * Test to verify annotation enforcement rules
 */
public class AnnotationEnforcementTest {
    
    // Valid entity - exactly one @Id and one @ShardingKey
    @Table(name = "valid_entities")
    static class ValidEntity implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        @Column(name = "entity_id")
        private String id;
        
        @ShardingKey
        @Column(name = "created_at")
        private LocalDateTime createdAt;
        
        @Column(name = "name")
        private String name;
        
        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        public LocalDateTime getCreatedAt() { return createdAt; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
        @Override
        public LocalDateTime getPartitionColValue() { return createdAt; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.createdAt = value; }
    }
    
    // Invalid - Multiple @Id annotations
    @Table(name = "multi_id_entities")
    static class MultipleIdEntity implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        private String id1;
        
        @Id(autoGenerated = false)  // Second @Id - INVALID!
        private String id2;
        
        @ShardingKey
        private LocalDateTime createdAt;
        
        @Override
        public String getId() { return id1; }
        @Override
        public void setId(String id) { this.id1 = id; }
        public LocalDateTime getCreatedAt() { return createdAt; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
        @Override
        public LocalDateTime getPartitionColValue() { return createdAt; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.createdAt = value; }
    }
    
    // Invalid - Multiple @ShardingKey annotations
    @Table(name = "multi_shard_entities")
    static class MultipleShardingKeyEntity implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        private String id;
        
        @ShardingKey
        private LocalDateTime createdAt;
        
        @ShardingKey  // Second @ShardingKey - INVALID!
        private LocalDateTime updatedAt;
        
        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        public LocalDateTime getCreatedAt() { return createdAt; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
        @Override
        public LocalDateTime getPartitionColValue() { return createdAt; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.createdAt = value; }
    }
    
    // Invalid - Wrong ID type (Long instead of String)
    @Table(name = "wrong_id_type_entities")
    static class WrongIdTypeEntity implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        private Long id;  // Wrong type - must be String!
        
        @ShardingKey
        private LocalDateTime createdAt;
        
        @Override
        public String getId() { return String.valueOf(id); }
        @Override
        public void setId(String id) { this.id = Long.valueOf(id); }
        public LocalDateTime getCreatedAt() { return createdAt; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
        @Override
        public LocalDateTime getPartitionColValue() { return createdAt; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.createdAt = value; }
    }
    
    // Invalid - Wrong ShardingKey type (String instead of LocalDateTime)
    @Table(name = "wrong_shard_type_entities")
    static class WrongShardingKeyTypeEntity implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        private String id;
        
        @ShardingKey
        private String createdAt;  // Wrong type - must be LocalDateTime!
        
        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        public LocalDateTime getCreatedAt() { return createdAt != null ? LocalDateTime.parse(createdAt) : null; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt != null ? createdAt.toString() : null; }
        @Override
        public LocalDateTime getPartitionColValue() { return getCreatedAt(); }
        @Override
        public void setPartitionColValue(LocalDateTime value) { setCreatedAt(value); }
    }
    
    // Invalid - Auto-generated ID
    @Table(name = "auto_gen_entities")
    static class AutoGeneratedIdEntity implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = true)  // INVALID - must be false!
        private String id;
        
        @ShardingKey
        private LocalDateTime createdAt;
        
        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        public LocalDateTime getCreatedAt() { return createdAt; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
        @Override
        public LocalDateTime getPartitionColValue() { return createdAt; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.createdAt = value; }
    }
    
    // Invalid - Missing @Id
    @Table(name = "no_id_entities")
    static class NoIdEntity implements ShardingEntity<LocalDateTime> {
        private String id;  // No @Id annotation!
        
        @ShardingKey
        private LocalDateTime createdAt;
        
        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        public LocalDateTime getCreatedAt() { return createdAt; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
        @Override
        public LocalDateTime getPartitionColValue() { return createdAt; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.createdAt = value; }
    }
    
    // Invalid - Missing @ShardingKey
    @Table(name = "no_shard_entities")
    static class NoShardingKeyEntity implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        private String id;
        
        private LocalDateTime createdAt;  // No @ShardingKey annotation!
        
        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        public LocalDateTime getCreatedAt() { return createdAt; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
        @Override
        public LocalDateTime getPartitionColValue() { return createdAt; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.createdAt = value; }
    }
    
    public static void main(String[] args) {
        System.out.println("=== Annotation Enforcement Test ===\n");
        
        int passed = 0;
        int failed = 0;
        
        // Test 1: Valid entity should work
        System.out.println("Test 1: Valid entity (1 @Id, 1 @ShardingKey)");
        try {
            new EntityMetadata<>(ValidEntity.class);
            System.out.println("✓ PASSED: Valid entity accepted\n");
            passed++;
        } catch (Exception e) {
            System.out.println("✗ FAILED: " + e.getMessage() + "\n");
            failed++;
        }
        
        // Test 2: Multiple @Id should fail
        System.out.println("Test 2: Multiple @Id annotations");
        try {
            new EntityMetadata<>(MultipleIdEntity.class);
            System.out.println("✗ FAILED: Should have rejected multiple @Id\n");
            failed++;
        } catch (IllegalArgumentException e) {
            System.out.println("✓ PASSED: Correctly rejected - " + e.getMessage() + "\n");
            passed++;
        }
        
        // Test 3: Multiple @ShardingKey should fail
        System.out.println("Test 3: Multiple @ShardingKey annotations");
        try {
            new EntityMetadata<>(MultipleShardingKeyEntity.class);
            System.out.println("✗ FAILED: Should have rejected multiple @ShardingKey\n");
            failed++;
        } catch (IllegalArgumentException e) {
            System.out.println("✓ PASSED: Correctly rejected - " + e.getMessage() + "\n");
            passed++;
        }
        
        // Test 4: Wrong ID type should fail
        System.out.println("Test 4: Wrong ID type (Long instead of String)");
        try {
            new EntityMetadata<>(WrongIdTypeEntity.class);
            System.out.println("✗ FAILED: Should have rejected non-String ID\n");
            failed++;
        } catch (IllegalArgumentException e) {
            System.out.println("✓ PASSED: Correctly rejected - " + e.getMessage() + "\n");
            passed++;
        }
        
        // Test 5: Wrong ShardingKey type should fail
        System.out.println("Test 5: Wrong ShardingKey type (String instead of LocalDateTime)");
        try {
            new EntityMetadata<>(WrongShardingKeyTypeEntity.class);
            System.out.println("✗ FAILED: Should have rejected non-LocalDateTime ShardingKey\n");
            failed++;
        } catch (IllegalArgumentException e) {
            System.out.println("✓ PASSED: Correctly rejected - " + e.getMessage() + "\n");
            passed++;
        }
        
        // Test 6: Auto-generated ID should fail
        System.out.println("Test 6: Auto-generated ID");
        try {
            new EntityMetadata<>(AutoGeneratedIdEntity.class);
            System.out.println("✗ FAILED: Should have rejected autoGenerated=true\n");
            failed++;
        } catch (IllegalArgumentException e) {
            System.out.println("✓ PASSED: Correctly rejected - " + e.getMessage() + "\n");
            passed++;
        }
        
        // Test 7: Missing @Id should fail
        System.out.println("Test 7: Missing @Id annotation");
        try {
            new EntityMetadata<>(NoIdEntity.class);
            System.out.println("✗ FAILED: Should have rejected missing @Id\n");
            failed++;
        } catch (IllegalArgumentException e) {
            System.out.println("✓ PASSED: Correctly rejected - " + e.getMessage() + "\n");
            passed++;
        }
        
        // Test 8: Missing @ShardingKey should fail
        System.out.println("Test 8: Missing @ShardingKey annotation");
        try {
            new EntityMetadata<>(NoShardingKeyEntity.class);
            System.out.println("✗ FAILED: Should have rejected missing @ShardingKey\n");
            failed++;
        } catch (IllegalArgumentException e) {
            System.out.println("✓ PASSED: Correctly rejected - " + e.getMessage() + "\n");
            passed++;
        }
        
        // Summary
        System.out.println("=== Test Summary ===");
        System.out.println("Total Tests: " + (passed + failed));
        System.out.println("Passed: " + passed);
        System.out.println("Failed: " + failed);
        System.out.println("Success Rate: " + (passed * 100 / (passed + failed)) + "%");
        
        System.out.println("\n=== Enforcement Rules Confirmed ===");
        System.out.println("✅ Exactly ONE @Id annotation required");
        System.out.println("✅ Exactly ONE @ShardingKey annotation required");
        System.out.println("✅ @Id field must be String type");
        System.out.println("✅ @ShardingKey field must be LocalDateTime type");
        System.out.println("✅ @Id must have autoGenerated=false");
        System.out.println("✅ No multiple annotations allowed");
    }
}