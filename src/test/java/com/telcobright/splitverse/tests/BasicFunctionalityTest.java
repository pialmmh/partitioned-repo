package com.telcobright.splitverse.tests;

import com.telcobright.core.repository.SplitVerseRepository;
import com.telcobright.splitverse.config.ShardConfig;
import com.telcobright.splitverse.config.RepositoryMode;
import com.telcobright.core.entity.ShardingEntity;
import com.telcobright.core.annotation.*;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.*;

/**
 * Basic functionality test to verify core operations work correctly
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class BasicFunctionalityTest {

    private static SplitVerseRepository<TestEntity, LocalDateTime> repository;
    private static final String TEST_DB = "test_basic_" + System.currentTimeMillis();

    @Table(name = "test_entity")
    public static class TestEntity implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        @Column(name = "id")
        private String id;

        @Column(name = "name")
        private String name;

        @ShardingKey
        @Column(name = "created_at")
        private LocalDateTime createdAt;

        @Column(name = "value")
        private Integer value;

        public TestEntity() {}

        public TestEntity(String name, LocalDateTime createdAt, Integer value) {
            this.id = UUID.randomUUID().toString();
            this.name = name;
            this.createdAt = createdAt;
            this.value = value;
        }

        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        @Override
        public LocalDateTime getPartitionColValue() { return createdAt; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.createdAt = value; }

        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        public LocalDateTime getCreatedAt() { return createdAt; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
        public Integer getValue() { return value; }
        public void setValue(Integer value) { this.value = value; }
    }

    @BeforeAll
    static void setup() throws Exception {
        System.out.println("\n=== Basic Functionality Test ===");

        // Create test database
        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://127.0.0.1:3306", "root", "123456");
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("CREATE DATABASE IF NOT EXISTS " + TEST_DB);
        }

        // Configure repository
        ShardConfig shardConfig = ShardConfig.builder()
            .shardId("primary")
            .host("127.0.0.1")
            .port(3306)
            .database(TEST_DB)
            .username("root")
            .password("123456")
            .enabled(true)
            .build();

        repository = SplitVerseRepository.<TestEntity, LocalDateTime>builder()
            .withSingleShard(shardConfig)
            .withEntityClass(TestEntity.class)
            .withRepositoryMode(RepositoryMode.MULTI_TABLE)
            .build();
    }

    @Test
    @Order(1)
    void testInsertAndFindById() throws Exception {
        System.out.println("\n1. Testing insert and find by ID:");

        TestEntity entity = new TestEntity("Test1", LocalDateTime.now(), 100);
        repository.insert(entity);
        System.out.println("  Inserted entity with ID: " + entity.getId());

        TestEntity found = repository.findById(entity.getId());
        assertNotNull(found, "Should find entity by ID");
        assertEquals(entity.getName(), found.getName());
        assertEquals(entity.getValue(), found.getValue());
        System.out.println("  ✓ Found entity by ID");
    }

    @Test
    @Order(2)
    void testFindByDateRange() throws Exception {
        System.out.println("\n2. Testing date range query:");

        LocalDateTime now = LocalDateTime.now();

        // Insert entities for different days
        List<TestEntity> entities = Arrays.asList(
            new TestEntity("Today1", now, 1),
            new TestEntity("Today2", now.minusHours(1), 2),
            new TestEntity("Yesterday1", now.minusDays(1), 3),
            new TestEntity("Yesterday2", now.minusDays(1).minusHours(2), 4),
            new TestEntity("TwoDaysAgo", now.minusDays(2), 5)
        );

        for (TestEntity entity : entities) {
            repository.insert(entity);
        }
        System.out.println("  Inserted " + entities.size() + " entities");

        // Query date range
        LocalDateTime startDate = now.minusDays(2).toLocalDate().atStartOfDay();
        LocalDateTime endDate = now.plusDays(1).toLocalDate().atStartOfDay();

        List<TestEntity> found = repository.findAllByPartitionRange(startDate, endDate);
        System.out.println("  Found " + found.size() + " entities in date range");

        assertTrue(found.size() >= 5, "Should find at least 5 entities");
    }

    @Test
    @Order(3)
    void testUpdate() throws Exception {
        System.out.println("\n3. Testing update:");

        TestEntity entity = new TestEntity("Original", LocalDateTime.now(), 999);
        repository.insert(entity);

        entity.setName("Updated");
        entity.setValue(1000);
        repository.updateById(entity.getId(), entity);

        TestEntity updated = repository.findById(entity.getId());
        assertEquals("Updated", updated.getName());
        assertEquals(1000, updated.getValue());
        System.out.println("  ✓ Update successful");
    }

    @Test
    @Order(4)
    void testDelete() throws Exception {
        System.out.println("\n4. Testing delete:");

        TestEntity entity = new TestEntity("ToDelete", LocalDateTime.now(), 0);
        repository.insert(entity);

        repository.deleteById(entity.getId());

        TestEntity deleted = repository.findById(entity.getId());
        assertNull(deleted, "Entity should be deleted");
        System.out.println("  ✓ Delete successful");
    }

    @AfterAll
    static void cleanup() throws Exception {
        System.out.println("\n=== Cleanup ===");

        if (repository != null) {
            repository.shutdown();
        }

        // Drop test database
        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://127.0.0.1:3306", "root", "123456");
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("DROP DATABASE IF EXISTS " + TEST_DB);
        }

        System.out.println("✓ Cleanup complete");
    }
}