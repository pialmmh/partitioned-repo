package com.telcobright.splitverse.tests;

import com.telcobright.core.repository.SplitVerseRepository;
import com.telcobright.splitverse.config.RepositoryMode;
import com.telcobright.splitverse.config.ShardConfig;
import com.telcobright.core.annotation.Table;
import com.telcobright.core.annotation.Id;
import com.telcobright.core.annotation.Column;
import com.telcobright.core.entity.ShardingEntity;
import org.junit.jupiter.api.*;
import java.sql.*;
import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.*;

public class DebugPartitionTest {
    private static final String TEST_DB = "test_debug_partition";
    private static SplitVerseRepository<EventRecord, LocalDateTime> repository;

    @Table(name = "events")
    public static class EventRecord implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        private String id;

        @com.telcobright.core.annotation.ShardingKey
        @Column(name = "event_time")
        private LocalDateTime eventTime;

        @Column(name = "data")
        private String data;

        public EventRecord() {}

        public EventRecord(String id, LocalDateTime eventTime, String data) {
            this.id = id;
            this.eventTime = eventTime;
            this.data = data;
        }

        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        @Override
        public LocalDateTime getPartitionColValue() { return eventTime; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.eventTime = value; }

        public LocalDateTime getEventTime() { return eventTime; }
        public void setEventTime(LocalDateTime time) { this.eventTime = time; }
        public String getData() { return data; }
        public void setData(String data) { this.data = data; }
    }

    @BeforeAll
    static void setup() throws Exception {
        System.out.println("Setting up debug test database: " + TEST_DB);

        // Create test database
        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://127.0.0.1:3306?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC",
                "root", "123456");
             Statement stmt = conn.createStatement()) {
            stmt.execute("DROP DATABASE IF EXISTS " + TEST_DB);
            stmt.execute("CREATE DATABASE " + TEST_DB);
        }

        ShardConfig shardConfig = ShardConfig.builder()
            .shardId("shard1")
            .database(TEST_DB)
            .host("127.0.0.1")
            .port(3306)
            .username("root")
            .password("123456")
            .enabled(true)
            .build();

        try {
            repository = SplitVerseRepository.<EventRecord, LocalDateTime>builder()
                .withSingleShard(shardConfig)
                .withEntityClass(EventRecord.class)
                .withRepositoryMode(RepositoryMode.MULTI_TABLE)
                .withNestedPartitions(true)
                .withNestedPartitionCount(24)
                .withRetentionDays(3)
                .build();

            System.out.println("Repository initialized successfully");
        } catch (Exception e) {
            System.err.println("Failed to initialize repository: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    void testPartitionCreation() throws Exception {
        System.out.println("\nChecking partition structure...");

        // Insert a test event
        EventRecord event = new EventRecord(
            "TEST_001",
            LocalDateTime.now(),
            "Test event"
        );

        repository.insert(event);
        System.out.println("Inserted test event");

        // Check table structure
        String todayTable = "events_" + LocalDateTime.now().format(
            java.time.format.DateTimeFormatter.ofPattern("yyyyMMdd"));

        String sql = "SHOW CREATE TABLE " + TEST_DB + "." + todayTable;

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://127.0.0.1:3306/" + TEST_DB + "?useSSL=false&serverTimezone=UTC",
                "root", "123456");
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            if (rs.next()) {
                String createTable = rs.getString("Create Table");
                System.out.println("Table structure:\n" + createTable);

                // Verify it has proper datetime partitions
                assertTrue(createTable.contains("PARTITION BY RANGE"));
                assertTrue(createTable.contains("VALUES LESS THAN"));
                assertTrue(createTable.contains("01:00:00"));
            }
        }
    }

    @AfterAll
    static void cleanup() throws Exception {
        System.out.println("\nKeeping debug database: " + TEST_DB);
    }
}