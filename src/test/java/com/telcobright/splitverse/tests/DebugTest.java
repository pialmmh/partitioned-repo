package com.telcobright.splitverse.tests;

import com.telcobright.api.ShardingRepository;
import com.telcobright.core.config.DataSourceConfig;
import com.telcobright.core.entity.ShardingEntity;
import com.telcobright.core.enums.ShardingStrategy;
import com.telcobright.core.repository.SplitVerseRepository;
import com.telcobright.core.annotation.*;
import com.telcobright.splitverse.config.RepositoryMode;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.UUID;

public class DebugTest {

    @Table(name = "test_entity")
    public static class TestEntity implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        @Column(name = "id")
        private String id;

        @ShardingKey
        @Column(name = "created_at")
        private LocalDateTime createdAt;

        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        @Override
        public LocalDateTime getCreatedAt() { return createdAt; }
        @Override
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    }

    public static void main(String[] args) {
        try {
            System.out.println("Creating database...");
            // Create test database
            String createDb = "mysql -h 127.0.0.1 -P 3306 -u root -p123456 -e \"CREATE DATABASE IF NOT EXISTS test_debug\"";
            Process p = Runtime.getRuntime().exec(createDb);
            p.waitFor();

            System.out.println("Building repository...");
            ShardingRepository<TestEntity, LocalDateTime> repository = SplitVerseRepository.<TestEntity, LocalDateTime>builder()
                .withEntityClass(TestEntity.class)
                .withTableName("test_entities")
                .withShardingStrategy(ShardingStrategy.SINGLE_KEY_HASH)
                .withRepositoryMode(RepositoryMode.MULTI_TABLE)
                .withDataSources(Arrays.asList(
                    DataSourceConfig.create("127.0.0.1", 3306, "test_debug", "root", "123456")
                ))
                .build();

            System.out.println("Repository created successfully!");

            // Test insert
            TestEntity entity = new TestEntity();
            entity.setId(UUID.randomUUID().toString().substring(0, 22));
            entity.setCreatedAt(LocalDateTime.now());

            repository.insert(entity);
            System.out.println("Entity inserted successfully!");

            // Test find
            TestEntity found = repository.findById(entity.getId());
            System.out.println("Entity found: " + (found != null));

            repository.shutdown();
            System.out.println("Test completed successfully!");

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}