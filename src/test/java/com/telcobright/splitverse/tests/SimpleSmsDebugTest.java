package com.telcobright.splitverse.tests;

import com.telcobright.core.repository.SplitVerseRepository;
import com.telcobright.core.repository.GenericMultiTableRepository;
import com.telcobright.splitverse.config.RepositoryMode;
import com.telcobright.splitverse.config.ShardConfig;
import com.telcobright.core.annotation.Table;
import com.telcobright.core.annotation.Id;
import com.telcobright.core.annotation.Column;
import com.telcobright.core.annotation.ShardingKey;
import com.telcobright.core.entity.ShardingEntity;
import org.junit.jupiter.api.*;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.*;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Simple test to debug SMS retrieval issue
 */
public class SimpleSmsDebugTest {
    private static final String TEST_DB = "sms_debug_test";
    private static SplitVerseRepository<SmsRecord, LocalDateTime> repository;

    @Table(name = "sms")
    public static class SmsRecord implements ShardingEntity<LocalDateTime> {
        @Id(autoGenerated = false)
        private String id;

        @ShardingKey
        @Column(name = "created_at")
        private LocalDateTime createdAt;

        @Column(name = "message")
        private String message;

        public SmsRecord() {}

        public SmsRecord(String id, LocalDateTime createdAt, String message) {
            this.id = id;
            this.createdAt = createdAt;
            this.message = message;
        }

        @Override
        public String getId() { return id; }
        @Override
        public void setId(String id) { this.id = id; }
        @Override
        public LocalDateTime getPartitionColValue() { return createdAt; }
        @Override
        public void setPartitionColValue(LocalDateTime value) { this.createdAt = value; }

        public LocalDateTime getCreatedAt() { return createdAt; }
        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
        public String getMessage() { return message; }
        public void setMessage(String message) { this.message = message; }
    }

    @BeforeAll
    static void setup() throws Exception {
        // Create test database
        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://127.0.0.1:3306?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC",
                "root", "123456");
             Statement stmt = conn.createStatement()) {
            stmt.execute("DROP DATABASE IF EXISTS " + TEST_DB);
            stmt.execute("CREATE DATABASE " + TEST_DB);
        }

        // Configure shard
        ShardConfig shardConfig = ShardConfig.builder()
            .shardId("shard_01")
            .database(TEST_DB)
            .host("127.0.0.1")
            .port(3306)
            .username("root")
            .password("123456")
            .enabled(true)
            .build();

        // Build repository with MULTI_TABLE mode
        repository = SplitVerseRepository.<SmsRecord, LocalDateTime>builder()
            .withSingleShard(shardConfig)
            .withEntityClass(SmsRecord.class)
            .withRepositoryMode(RepositoryMode.MULTI_TABLE)
            .withTableGranularity(GenericMultiTableRepository.TableGranularity.DAILY)
            .withPartitionType(com.telcobright.core.partition.PartitionType.DATE_BASED)
            .build();
    }

    @Test
    void testInsertAndImmediateRetrieve() throws Exception {
        System.out.println("=== Simple Debug Test ===");

        String id = UUID.randomUUID().toString();
        LocalDateTime now = LocalDateTime.now();
        String message = "Test message";

        System.out.println("Inserting SMS with ID: " + id);
        System.out.println("Timestamp: " + now);

        // Insert
        SmsRecord sms = new SmsRecord(id, now, message);
        repository.insert(sms);
        System.out.println("Insert complete");

        // Immediate retrieval
        System.out.println("\nAttempting immediate retrieval...");
        SmsRecord retrieved = repository.findByIdAndPartitionColRange(
            id,
            now.minusMinutes(1),
            now.plusMinutes(1)
        );

        if (retrieved != null) {
            System.out.println("SUCCESS: Retrieved SMS with ID: " + retrieved.getId());
            assertEquals(id, retrieved.getId());
            assertEquals(message, retrieved.getMessage());
        } else {
            System.out.println("FAILED: Could not retrieve SMS");

            // Debug: check database directly
            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://127.0.0.1:3306/" + TEST_DB + "?useSSL=false&serverTimezone=UTC",
                    "root", "123456");
                 Statement stmt = conn.createStatement()) {

                // Find the table
                ResultSet rs = stmt.executeQuery("SHOW TABLES");
                List<String> tables = new ArrayList<>();
                while (rs.next()) {
                    tables.add(rs.getString(1));
                }
                rs.close();

                for (String tableName : tables) {
                    System.out.println("Checking table: " + tableName);

                    // Check if ID exists
                    ResultSet dataRs = stmt.executeQuery(
                        "SELECT * FROM " + tableName + " WHERE id = '" + id + "'"
                    );
                    if (dataRs.next()) {
                        System.out.println("ID EXISTS in " + tableName + "!");
                        System.out.println("  created_at: " + dataRs.getTimestamp("created_at"));
                        System.out.println("  message: " + dataRs.getString("message"));
                    }
                    dataRs.close();
                }
            }

            fail("Should have retrieved the SMS record");
        }
    }
}