package com.telcobright.core.metadata;

import com.telcobright.core.annotation.*;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * Metadata for a single field in an entity
 */
public class FieldMetadata {
    private final Field field;
    private final String fieldName;
    private final String columnName;
    private final Class<?> type;
    private final boolean isId;
    private final boolean isAutoGenerated;
    private final boolean isShardingKey;
    private final boolean isNullable;
    private final boolean isInsertable;
    private final boolean isUpdatable;
    private final Index indexAnnotation;
    
    public FieldMetadata(Field field) {
        this.field = field;
        this.fieldName = field.getName();
        this.type = field.getType();
        
        // Parse annotations
        Column columnAnnotation = field.getAnnotation(Column.class);
        if (columnAnnotation != null && !columnAnnotation.name().isEmpty()) {
            this.columnName = columnAnnotation.name();
        } else {
            // Convert camelCase to snake_case
            this.columnName = toSnakeCase(fieldName);
        }
        
        Id idAnnotation = field.getAnnotation(Id.class);
        this.isId = idAnnotation != null;
        this.isAutoGenerated = isId && (idAnnotation == null || idAnnotation.autoGenerated());
        
        this.isShardingKey = field.getAnnotation(ShardingKey.class) != null;
        this.indexAnnotation = field.getAnnotation(Index.class);
        
        if (columnAnnotation != null) {
            this.isNullable = columnAnnotation.nullable();
            this.isInsertable = columnAnnotation.insertable();
            this.isUpdatable = columnAnnotation.updatable();
        } else {
            this.isNullable = true;
            this.isInsertable = true;
            this.isUpdatable = true;
        }
    }
    
    private String toSnakeCase(String camelCase) {
        return camelCase.replaceAll("([a-z])([A-Z])", "$1_$2").toLowerCase();
    }
    
    public Object getValue(Object entity) {
        try {
            return field.get(entity);
        } catch (IllegalAccessException e) {
            throw new RuntimeException("Failed to get field value: " + fieldName, e);
        }
    }
    
    public void setValue(Object entity, Object value) {
        try {
            field.set(entity, value);
        } catch (IllegalAccessException e) {
            throw new RuntimeException("Failed to set field value: " + fieldName, e);
        }
    }
    
    public String getSqlType() {
        if (type == String.class) {
            if (fieldName.equals("message") || fieldName.equals("shippingAddress")) {
                return "TEXT";
            }
            return "VARCHAR(255)";
        } else if (type == Long.class || type == long.class) {
            return "BIGINT";
        } else if (type == Integer.class || type == int.class) {
            return "INT";
        } else if (type == LocalDateTime.class) {
            return "DATETIME";
        } else if (type == BigDecimal.class) {
            return "DECIMAL(10,2)";
        } else if (type == Boolean.class || type == boolean.class) {
            return "BOOLEAN";
        } else if (type == Double.class || type == double.class) {
            return "DOUBLE";
        } else {
            return "VARCHAR(255)";
        }
    }
    
    // Getters
    public String getFieldName() { return fieldName; }
    public String getColumnName() { return columnName; }
    public Class<?> getType() { return type; }
    public boolean isId() { return isId; }
    public boolean isAutoGenerated() { return isAutoGenerated; }
    public boolean isShardingKey() { return isShardingKey; }
    public boolean isNullable() { return isNullable; }
    public boolean isInsertable() { return isInsertable; }
    public boolean isUpdatable() { return isUpdatable; }
    
    /**
     * Check if this field has an @Index annotation
     */
    public boolean hasIndex() { return indexAnnotation != null; }
    
    /**
     * Get the @Index annotation if present
     */
    public Index getIndexAnnotation() { return indexAnnotation; }
    
    /**
     * Get the index name, either custom or auto-generated
     */
    public String getIndexName() {
        if (indexAnnotation == null) return null;
        
        String customName = indexAnnotation.name();
        if (!customName.isEmpty()) {
            return customName;
        }
        
        // Auto-generate index name: idx_{column_name}
        return "idx_" + columnName;
    }
}