package com.telcobright.core.entity;

import com.telcobright.core.annotation.Column;
import com.telcobright.core.annotation.ShardingKey;
import java.lang.reflect.Field;
import java.time.LocalDateTime;

/**
 * Base interface for all entities used with ShardingRepository.
 * Supports generic partition column types for flexible range-based partitioning.
 *
 * Requirements:
 * 1. All IDs must be String type (externally generated - NO AUTO_INCREMENT)
 * 2. All entities must have a partition column annotated with @ShardingKey
 * 3. Partition column type must be Comparable for range queries
 * 4. No composite key support - single String ID only
 *
 * Implementation notes:
 * - ID field must be annotated with @Id(autoGenerated = false)
 * - Partition field must be annotated with @ShardingKey and @Column
 * - Use external ID generators: UUID, NanoID, ULID, etc.
 *
 * Example:
 * <pre>
 * @Table(name = "calls")
 * public class Call implements ShardingEntity&lt;LocalDateTime&gt; {
 *     @Id(autoGenerated = false)
 *     @Column(name = "call_id")
 *     private String id;
 *
 *     @ShardingKey
 *     @Column(name = "start_time")
 *     private LocalDateTime startTime;
 *
 *     // implement interface methods...
 * }
 * </pre>
 *
 * @param <T> The type of the partition column value (must be Comparable)
 */
public interface ShardingEntity<T extends Comparable<? super T>> {
    /**
     * Get the entity's unique identifier.
     * Must be externally generated (UUID, NanoID, ULID, etc.)
     *
     * @return the entity ID as String
     */
    String getId();

    /**
     * Set the entity's unique identifier.
     * IDs must be generated externally before insertion.
     *
     * @param id the entity ID as String
     */
    void setId(String id);

    /**
     * Get the partition column value used for range-based partitioning.
     * This value is critical for partition pruning and query routing.
     *
     * @return the partition column value
     */
    T getPartitionColValue();

    /**
     * Set the partition column value used for range-based partitioning.
     *
     * @param value the partition column value
     */
    void setPartitionColValue(T value);

    /**
     * Get the partition column name from the field annotated with @ShardingKey.
     * This extracts the column name from the @Column annotation on the @ShardingKey field.
     *
     * @return the database column name (e.g., "created_at", "start_time", "amount")
     */
    default String getPartitionColName() {
        // Find field with @ShardingKey annotation
        for (Field field : this.getClass().getDeclaredFields()) {
            if (field.isAnnotationPresent(ShardingKey.class)) {
                // Get column name from @Column annotation
                Column column = field.getAnnotation(Column.class);
                if (column != null && column.name() != null && !column.name().isEmpty()) {
                    return column.name();
                }
                // Fallback to field name if no @Column
                return field.getName();
            }
        }
        throw new IllegalStateException("No field with @ShardingKey annotation found in " + this.getClass().getName());
    }

    /**
     * Get the datetime value used for partitioning.
     * This method is kept for backward compatibility with existing code.
     *
     * @return the partitioning datetime
     * @deprecated Use getPartitionColValue() instead for generic support
     */
    @Deprecated
    default LocalDateTime getCreatedAt() {
        Object value = getPartitionColValue();
        if (value instanceof LocalDateTime) {
            return (LocalDateTime) value;
        }
        throw new UnsupportedOperationException("This entity does not use LocalDateTime for partitioning");
    }

    /**
     * Set the datetime value used for partitioning.
     * This method is kept for backward compatibility with existing code.
     *
     * @param createdAt the partitioning datetime
     * @deprecated Use setPartitionColValue() instead for generic support
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    default void setCreatedAt(LocalDateTime createdAt) {
        try {
            setPartitionColValue((T) createdAt);
        } catch (ClassCastException e) {
            throw new UnsupportedOperationException("This entity does not use LocalDateTime for partitioning");
        }
    }
}